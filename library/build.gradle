apply plugin: 'com.android.library'

android {
    compileSdkVersion 28
    buildToolsVersion "28.0.3"

    defaultConfig {
        minSdkVersion 17
        targetSdkVersion 28
        versionCode 112
        versionName "1.1.2"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        vectorDrawables.useSupportLibrary = true

    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    androidTestImplementation('androidx.test.espresso:espresso-core:3.1.0-alpha4', {
        exclude group: 'com.android.support', module: 'support-annotations'
    })
    def SupportLibVersion = '1.0.0-beta01'
    implementation "androidx.appcompat:appcompat:$SupportLibVersion",
            "com.google.android.material:material:$SupportLibVersion"
    
    def playServicesVersion = '16.0.0'
    implementation "com.google.android.gms:play-services-maps:$playServicesVersion",
            "com.google.android.gms:play-services-location:$playServicesVersion"

    implementation('com.schibstedspain.android:android-reactive-location:0.10.1') {
        exclude group: 'com.google.android.gms'
    }
    implementation 'com.tbruyelle.rxpermissions:rxpermissions:0.9.4@aar'
    implementation 'com.google.maps.android:android-maps-utils:0.5+'
    testImplementation'junit:junit:4.12'
}
// build a jar with source files
task sourcesJar(type: Jar) {
    from android.sourceSets.main.java.srcDirs
    classifier = 'sources'
}

task javadoc(type: Javadoc) {
    failOnError  false
    source = android.sourceSets.main.java.sourceFiles
    classpath +=     project.files(android.getBootClasspath().join(File.pathSeparator))
    classpath += configurations.compile
}

// build a jar with javadoc
task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

artifacts {
    archives sourcesJar
    archives javadocJar
}